#include <nan.h>

//
// Anonymous namespace
//
namespace {
	//
	// Returns error descriptions as generated by Scrypt
	//
	const char* ScryptErrorDescr(const int error) {
		switch(error) {
			case 0:
				return "success";
			case 1:
				return "getrlimit or sysctl(hw.usermem) failed";
			case 2:
				return "clock_getres or clock_gettime failed";
			case 3:
				return "error computing derived key";
			case 4:
				return "could not read salt from /dev/urandom";
			case 5:
				return "error in OpenSSL";
			case 6:
				return "malloc failed";
			case 7:
				return "data is not a valid scrypt-encrypted block";
			case 8:
				return "unrecognized scrypt format";
			case 9:
				return "decrypting file would take too much memory";
			case 10:
				return "decrypting file would take too long";
			case 11:
				return "password is incorrect";
			case 12:
				return "error writing output file";
			case 13:
				return "error reading input file";
			default:
				return "error unkown";
		}
	}
} // end anonymous namespace

namespace Scrypt {

	//
	// Creates a Scrypt specific JavaScript Error object
	//
	v8::Local<v8::Value> ScryptError(const int error) {
		NanEscapableScope();
		v8::Local<v8::Value> err = NanError(ScryptErrorDescr(error), error);
		v8::Local<v8::Object> obj = err.As<v8::Object>();
		obj->Set(NanNew<v8::String>("name"), NanNew<v8::String>("ScryptError"));
		return NanEscapeScope(err);
	}
} //end Scrypt namespace
